// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// arma_setdiff
arma::vec arma_setdiff(arma::vec x, arma::vec y);
RcppExport SEXP _VaDA_arma_setdiff(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(arma_setdiff(x, y));
    return rcpp_result_gen;
END_RCPP
}
// expit
arma::vec expit(const arma::vec& v);
RcppExport SEXP _VaDA_expit(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(expit(v));
    return rcpp_result_gen;
END_RCPP
}
// epsilonC
double epsilonC(const double& v);
RcppExport SEXP _VaDA_epsilonC(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(epsilonC(v));
    return rcpp_result_gen;
END_RCPP
}
// VLDA
List VLDA(const arma::vec& vy, const arma::mat& mX, const arma::mat& mXtest, const double& r, const double& kappa);
RcppExport SEXP _VaDA_VLDA(SEXP vySEXP, SEXP mXSEXP, SEXP mXtestSEXP, SEXP rSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type vy(vySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mX(mXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mXtest(mXtestSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double& >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(VLDA(vy, mX, mXtest, r, kappa));
    return rcpp_result_gen;
END_RCPP
}
// VQDA
List VQDA(const arma::vec& vy, const arma::mat& mX, const arma::mat& mXtest, const double& r, const double& kappa);
RcppExport SEXP _VaDA_VQDA(SEXP vySEXP, SEXP mXSEXP, SEXP mXtestSEXP, SEXP rSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type vy(vySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mX(mXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mXtest(mXtestSEXP);
    Rcpp::traits::input_parameter< const double& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double& >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(VQDA(vy, mX, mXtest, r, kappa));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_VaDA_arma_setdiff", (DL_FUNC) &_VaDA_arma_setdiff, 2},
    {"_VaDA_expit", (DL_FUNC) &_VaDA_expit, 1},
    {"_VaDA_epsilonC", (DL_FUNC) &_VaDA_epsilonC, 1},
    {"_VaDA_VLDA", (DL_FUNC) &_VaDA_VLDA, 5},
    {"_VaDA_VQDA", (DL_FUNC) &_VaDA_VQDA, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_VaDA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
